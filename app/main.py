# app/main.py

import os
import io
import cv2
import numpy as np
import torch
import re
from fastapi import FastAPI, UploadFile, File
from paddleocr import PaddleOCR
from inference_sdk import InferenceHTTPClient
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

ROBOFLOW_API_KEY = os.getenv("ROBOFLOW_API_KEY")
ROBOFLOW_MODEL_ID = "digitdetector-unbek/1"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
model_v5 = torch.hub.load('yolov5', 'custom', path='app/yolov5_model/best.pt', source='local')
ocr = PaddleOCR(det=False, use_angle_cls=False, lang='en')
client = InferenceHTTPClient(api_url="https://serverless.roboflow.com", api_key=ROBOFLOW_API_KEY)
print("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")

# === –§—É–Ω–∫—Ü–∏—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è ROI
def darken(image, factor=0.75):
    return np.clip(image * factor, 0, 255).astype(np.uint8)

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        contents = await file.read()
        nparr = np.frombuffer(contents, np.uint8)
        img_bgr = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        if img_bgr is None:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return "Fail"

        img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)

        # === 1. ROI —á–µ—Ä–µ–∑ YOLOv5
        print("üîç –ü–æ–∏—Å–∫ ROI —á–µ—Ä–µ–∑ YOLOv5...")
        results = model_v5(img_rgb)
        boxes = results.xyxy[0].cpu().numpy()
        if len(boxes) == 0:
            print("‚ùå –û—à–∏–±–∫–∞: YOLOv5 –Ω–µ –Ω–∞—à—ë–ª ROI.")
            return "Fail"

        x1, y1, x2, y2 = map(int, boxes[0][:4])
        roi = img_bgr[y1:y2, x1:x2]
        print("‚úÖ ROI –Ω–∞–π–¥–µ–Ω.")

        # === 2. –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ ROI
        roi_darker = darken(roi)
        print("üåë ROI –∑–∞—Ç–µ–º–Ω—ë–Ω.")

        # === 3. Roboflow API (–¥–µ—Ç–µ–∫—Ü–∏—è —Ü–∏—Ñ—Ä)
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ROI –≤ Roboflow...")
        _, img_encoded = cv2.imencode('.jpg', roi_darker)
        response = client.infer(file=img_encoded.tobytes(), model_id=ROBOFLOW_MODEL_ID)
        preds = response.get("predictions", [])
        print("üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç Roboflow.")

        if preds:
            median_y = np.median([p["y"] for p in preds])
            preds = [p for p in preds if p["y"] >= median_y * 0.9]
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç Roboflow.")
            return "Fail"

        # === 4. –í—ã—Ä–µ–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ü–∏—Ñ—Ä
        print("‚úÇÔ∏è –í—ã—Ä–µ–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ü–∏—Ñ—Ä...")
        digit_imgs = []
        for p in sorted(preds, key=lambda b: b["x"]):
            x, y = int(p["x"]), int(p["y"])
            w, h = int(p["width"] // 2), int(p["height"] // 2)
            x1, y1 = max(x - w, 0), max(y - h, 0)
            x2, y2 = min(x + w, roi.shape[1]), min(y + h, roi.shape[0])
            digit_crop = roi[y1:y2, x1:x2]
            if digit_crop.shape[0] < 10 or digit_crop.shape[1] < 10:
                continue
            resized = cv2.resize(digit_crop, (32, 64))
            digit_imgs.append(resized)

        if not digit_imgs:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –≤—ã—Ä–µ–∑–∫–∏.")
            return "Fail"

        row = cv2.hconcat(digit_imgs)
        print("üßµ –°–∫–ª–µ–π–∫–∞ —Ü–∏—Ñ—Ä –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # === 5. PaddleOCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)
        print("üìñ –ó–∞–ø—É—Å–∫ PaddleOCR...")
        img_rgb_row = cv2.cvtColor(row, cv2.COLOR_BGR2RGB)
        results = ocr.ocr(img_rgb_row, det=False)

        if results and isinstance(results[0], list) and len(results[0]) > 0:
            raw_text = results[0][0][0]
            clean = re.sub(r"[^0-9]", "", raw_text).strip()

            if len(clean) == 8 and clean.startswith("1"):
                clean = clean[1:]

            if clean:
                print(f"‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {clean}")
                return clean
            else:
                print("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç–∞.")
                return "Fail"
        else:
            print("‚ùå –û—à–∏–±–∫–∞: PaddleOCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å—Ç—Ä–æ–∫—É.")
            return "Fail"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /predict: {e}")
        return "Fail"
